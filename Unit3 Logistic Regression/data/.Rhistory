mean(data[,2])
sd(data[,2])
abs(rnorm(48,mean = 1500, sd = 1900))
rnorm(29,mean = 0, sd =2)
rnorm(29,mean = 0, sd = 3)
rnorm(29,mean = 0, sd = 2)
data <- read.csv("Dropbox//TVOC DATA/Room/1/2.csv"
,header = F)
rnorm(29,mean = 0, sd = 2)
data.vector <- c(data[,2:8])
5760/48
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
rnorm(29,mean = 0, sd = 2)
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
newdata[1] <- data.vector[1]
for(i in 1:length(data.vector)){
add <- seq(data.vector[i],data.vector[i+1],length = 30)[2:30] + rnorm(29, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
rnorm(29,mean = 0, sd = 2)
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
newdata[1] <- data.vector[1]
for(i in 1:length(data.vector)-1){
add <- seq(data.vector[i],data.vector[i+1],length = 30)[2:30] + rnorm(29, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
data <- read.csv("Dropbox//TVOC DATA/Room/1/2.csv"
,header = F)
rnorm(29,mean = 0, sd = 2)
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
newdata[1] <- data.vector[1]
for(i in 1:(length(data.vector)-1)){
add <- seq(data.vector[i],data.vector[i+1],length = 30)[2:30] + rnorm(29, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
length(newdata)
9716/1440
data <- read.csv("Dropbox//TVOC DATA/Room/1/2.csv"
,header = F)
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
for(i in 1:(length(data.vector)-1)){
add <- seq(data.vector[i],data.vector[i+1],length = 30)[1:30] + rnorm(30, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
10050/1440
30*48
1440*7
length(data.vector)
last <- seq(data.vector[335],data.vector[336],length = 30)
newdata <- c(newdata, last)
10080/1440
plot(newdata, type = 'l')
library(ggplot2)
data.plot <- data.frame(newdata)
ggplot(data.plot)
ggplot(data.plot) + geom_line()
data.plot <- data.frame(newdata)
ggplot(data.plot) + geom_line()
ggplot(data.plot,aes()) + geom_line()
ggplot(data.plot) + geom_line()
ggplot(data.plot,aes()) + geom_line()
?ggplot
ggplot(data=data.plot,aes()) + geom_line()
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
for(i in 1:(length(data.vector)-1)){
add <- seq(data.vector[i],data.vector[i+1],length = 30) + rnorm(30, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
last <- seq(data.vector[335],data.vector[336],length = 30)
newdata <- c(newdata, last)
data.plot <- data.frame(newdata)
data.plot
length(data.plot)
nrow(data.plot)
head(data.plot)
ggplot(data.plot,aes(data.plot[,1])) + geom_line()
data.plot[,1]
ggplot(data.plot,aes(y = data.plot[,1])) + geom_line()
?ggplot
ggplot(data.plot, aes(y = data.plot[,1])) + geom_line()
plot(newdata, type = 'l')
library(ggplot2)
data.plot <- data.frame(newdata)
ggplot(data.plot, aes(y = data.plot[,1])) + geom_line()
newdata
data
data <- read.csv("Dropbox//TVOC DATA/Room/1/2.csv"
,header = F)
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
for(i in 1:(length(data.vector)-1)){
add <- seq(data.vector[i],data.vector[i+1],length = 30) + rnorm(30, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
last <- seq(data.vector[335],data.vector[336],length = 30)
newdata <- c(newdata, last)
ID <- 1:10080
library(ggplot2)
data.plot <- data.frame(ID,newdata)
ggplot(data.plot, aes(x=ID, y=newdata)) + geom_line()
data <- read.csv("Dropbox//TVOC DATA/Room/1/2.csv"
,header = F)
data.vector <- c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8])
newdata <- vector()
for(i in 1:(length(data.vector)-1)){
add <- seq(data.vector[i],data.vector[i+1],length = 30) + rnorm(30, mean = 0, sd = 2)
newdata <- c(newdata, add)
}
last <- seq(data.vector[335],data.vector[336],length = 30)
newdata <- c(newdata, last)
ID <- 1:10080
write.csv(newdata, file = 'Desktop/result.csv')
?write.csv
data <- read.csv(file="Desktop/data/room2/room2-1.csv")
?read.csv
data <- read.csv("Desktop/data/room2/room2-1.csv")
head(data)
data <- read.csv("Desktop/data/room2/room2-1.csv")
getwd()
data <- read.csv("/Desktop/data/room2/room2-1.csv")
data <- read.csv("Desktop/data/room2/room2-1.csv")
data <- read.csv("Desktop/data/room2/room2-1.csv",header=FALSE)
data <- read.csv("Desktop/data/room2/room2-1.csv",header=FALSE,sep = ',')
data <- read.csv("Desktop/data/room2/room2-1.csv",header = FALSE)
data <- read.csv(file="Desktop/Room/1/room1-1.csv",header = FALSE)
head(data)
plot(data[,1],data[,2])
plot(data[,1],data[,2],type = "l")
?plot
plot(data[,1],data[,2],type = "l", pch = 20)
plot(data[,1],data[,2],type = "l", pch = 20, cex=0)
data <- read.csv(file="Desktop/Room/1/room1-1.csv",header = FALSE)
lines(data[,1],data[,2],type = "l", pch = 20, cex=0)
plot(data[,1],data[,2],type = "l", pch = 20, cex=0)
data <- read.csv(file="Desktop/Room/1/room1-1.csv",header = FALSE)
mean(data[,2])
median(data[,2])
max(data[,2])
min(data[,2])
data <- read.csv(file="Desktop/Room/1/room1-2.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/1/room1-3.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/1/room1-4.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/2/room2-1.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/3/room3-1.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/3/room3-2.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/3/room3-3.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/3/room3-4.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/4/room4-1.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/4/room4-2.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/4/room4-3.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/4/room4-4.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/5/room5-1.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/5/room5-2.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/5/room5-3.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/5/room5-4.csv",header = FALSE)
mean(data[,2])
median(data[,2])
min(data[,2])
max(data[,2])
data <- read.csv(file="Desktop/Room/1/1.csv",header = FALSE)
mean(data[,2:8])
median(data[,2:8])
min(data[,2:8])
max(data[,2:8])
data[,2:8]
data[,2:7]
data[,2:3]
head(data)
data <- read.csv(file="Desktop/Room/2/1.csv",header = FALSE)
mean(data[,2:8])
median(data[,2:8])
min(data[,2:8])
max(data[,2:8])
head(data)
data <- read.csv(file="Desktop/Room/2/1.csv",header = FALSE)
mean(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
median(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
min(data[,2:8])
max(data[,2:8])
data <- read.csv(file="Desktop/Room/2/2.csv",header = FALSE)
mean(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
median(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
min(data[,2:8])
max(data[,2:8])
data <- read.csv(file="Desktop/Room/2/3.csv",header = FALSE)
mean(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
median(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
min(data[,2:8])
max(data[,2:8])
data <- read.csv(file="Desktop/Room/2/4.csv",header = FALSE)
mean(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
median(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
min(data[,2:8])
max(data[,2:8])
data <- read.csv(file="Desktop/Room/2/4.csv",header = FALSE)
mean(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
median(c(data[,2],data[,3],data[,4],data[,5],data[,6],data[,7],data[,8]))
min(data[,2:8])
max(data[,2:8])
data <- read.csv(file="Desktop/Room/5/room5-4.csv",header = FALSE)
max(data[,2])
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area,
state.center, state.division, state.name, state.region)
str(statedata)
plot(statedata$x, statedata$y)
plot(statedata$y, statedata$x)
plot(statedata$x, statedata$y)
plot(statedata$x, statedata$y,lty=1)
?type
?plot
plot(statedata$x, statedata$y,cex = 1)
plot(statedata$x, statedata$y,cex = 2)
plot(statedata$x, statedata$y,cex = 0.1)
plot(statedata$x, statedata$y,cex = 0.5)
tapply(statedata$HS.Grad, statedata$state.region, mean)
boxplot(statedata$Murder, statedata$state.region)
boxplot(statedata$state.region, statedata$Murder)
?boxplot
boxplot(statedata$Murder ~ statedata$state.region)
northest = subset(statedata, state.region = "Northeast")
northeast = subset(statedata, state.region = "Northeast")
northeast
northeast = subset(statedata, state.region == "Northeast")
northeast
str(statedata)
stateNew = statedata[,1:8]
str(stateNew)
life.expReg = lm(Life.Exp ~ ., data=stateNew)
summary(life.expReg)
plot(statedata$Income, statedata$Life.Exp)
life.expReg2 = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost,
data = statedata)
summary(life.expReg2)
life.expReg3 = lm(Life.Exp ~ Population + Income + Murder + HS.Grad + Frost,
data = statedata)
summary(life.expReg3)
life.expReg4 = lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(life.expReg4)
cor(stateNew)
life.expReg2 = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost + Area,
data = statedata)
summary(life.expReg2)
life.expReg2 = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost,
data = statedata)
life.expReg3 = lm(Life.Exp ~ Population + Income + Murder + HS.Grad + Frost,
data = statedata)
life.expReg2 = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost,
data = statedata)
life.expReg3 = lm(Life.Exp ~ Population + Income + Murder + HS.Grad + Frost,
data = statedata)
life.expReg4 = lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(life.expReg4)
summary(life.expReg2)
life.expReg5 = step(life.expReg)
summary(life.expReg)
summary(life.expReg4)
sort(predict(life.expReg4))
sort(table(statedata$Life.Exp))
predict(life.expReg4)
str(statedata)
sort(table(statedata$state.name, statedata$Life.Exp))
?sort
which(statedata$Life.Exp == min(statedata$Life.Exp))
statedata[40,]
which.max(statedata$Life.Exp)
statedata[11,]
life.expReg4$residuals
sort(life.expReg4$residuals)
1 + 1
setwd("Desktop/Analytics Edge/Unit3 Logistic Regression/data/")
quality = read.csv("quality.csv")
str(quality)
table(quality$PoorCare)
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio=0.75)
qualityTrain = subset(quality, split==TRUE)
qualityTest = subset(quality, split==FALSE)
# bulit logistic model
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, family = binomial,
data = qualityTrain)
summary(QualityLog)
predictTrain = predict(QualityLog, type="response")
# Another model
QualityLog2 = glm(PoorCare ~ StartedOnCombination + ProviderCount, family=binomial,
data=qualityTrain)
summary(QualityLog2)
# ROCR curve
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,0.1), text.adj=c(-0.2,1.7))
predictTest = predict(QualityLog, type="response",newdata=qualityTest)
ROCRpredTest = prediction(predictTest,qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest,"auc")@y.values)
auc
framingham = read.csv("framingham.csv")
str(framingham)
library(caTOOLs)
library(caTools)
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
train = subset(framingham, split == TRUE)
test = subset(framingham, split == FALSE)
framinghamLog = glm(TenYearCHD ~ ., data = train, family = binomial)
summary(framinghamLog)
predictTest = predict(framinghamLog, type="response", newdata = test)
table(test$TenYearCHD, predictTest > 0.5)
(1069+11)/(1069+6+187+11)
(1069+6)/(1069+6+187+11)
library(ROCR)
ROCRpred = prediction(predictTest, test$TenYearCHD)
as.numeric(preformance(ROCRpred, "auc")@y.values)
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
table(test$TenYearCHD, predictTest > 0.5)
table(test$TenYearCHD, predictTest > 0.7)
table(test$TenYearCHD, predictTest > 0.3)
table(test$TenYearCHD, predictTest > 0.6)
table(test$TenYearCHD, predictTest > 0.55)
table(test$TenYearCHD, predictTest > 0.4)
11/(198)
1069/(1075)
# New model
framinghamLog2 = glm(TenYearCHD ~ male + age + education + cigsPerDay +
BPMeds + prevalentHyp + diabetes + totChol + sysBP + diaBP + BMI +
heartRate + glucose)
framinghamLog2 = glm(TenYearCHD ~ male + age + education + cigsPerDay +
BPMeds + prevalentHyp + diabetes + totChol + sysBP + diaBP + BMI +
heartRate + glucose, data = train, family = binomial)
summary(framinghamLog2)
# New model
framinghamLog2 = glm(TenYearCHD ~ male + age + education + cigsPerDay +
BPMeds + prevalentHyp + diabetes + totChol + sysBP + BMI +
heartRate + glucose, data = train, family = binomial)
summary(framinghamLog2)
framinghamLog2 = glm(TenYearCHD ~ male + age + education + cigsPerDay +
BPMeds + prevalentHyp + diabetes + totChol + sysBP +
heartRate + glucose, data = train, family = binomial)
summary(framinghamLog2)
framinghamLog2 = glm(TenYearCHD ~ male + age + education + cigsPerDay +
BPMeds + prevalentHyp + totChol + sysBP +
heartRate + glucose, data = train, family = binomial)
summary(framinghamLog2)
# New model
framinghamLog2 = glm(TenYearCHD ~ male + age + cigsPerDay +
BPMeds + prevalentHyp + totChol + sysBP +
heartRate + glucose, data = train, family = binomial)
summary(framinghamLog2)
framinghamLog2 = glm(TenYearCHD ~ male + age + education + cigsPerDay +
BPMeds + prevalentHyp + totChol + sysBP +
heartRate + glucose, data = train, family = binomial)
summary(framinghamLog2)
predictTest2 = predict(framinghamLog2, type = "respone", newdata = test)
predictTest2 = predict(framinghamLog2, type = "response", newdata = test)
table(test$TenYearCHD, predictTest2 > 0.5)
accuaray = (1075+11)/(1075+3+187+11)
accuaray
accuracy = (1075+11)/(1075+3+187+11)
baseline_accurary = (1075+3)/(1075+3+187+11)
baseline_accurary
ROCRpred2 = prediction(predictTest2, test$TenYearCHD)
auc2 = as.numeric(performance(ROCRpred2, "auc")@y.values)
auc2
auc
polling = read.csv("PollingData.csv")
str(polling)
table(polling$Year)
summary(polling)
install.packages("mice")
library("mice")
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
polling$SurveyUSA = imputed$SurveyUSA
polling$PropR = imputed$PropR
summary(polling)
polling = read.csv("PollingData.csv")
str(polling)
table(polling$Year)
summary(polling)
library("mice")
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
polling$SurveyUSA = imputed$SurveyUSA
polling$Rasmussen = imputed$Rasmussen
Train = subset(polling, Year == 2004 | Year == 2008)
Test = subset(polling, Year == 2012)
table(Train$Republican)
table(Train$Republican, sign(Train$Rasmussen))
table(Test$Republican, sign(Test$Rasmussen))
cor(Train$(c["Rasmussen","SurveyUSA","DiffCount","PropR","Republican"]))
cor(Train$c["Rasmussen","SurveyUSA","DiffCount","PropR","Republican"])
cor(Train$c("Rasmussen","SurveyUSA","DiffCount","PropR","Republican"))
cor(Train(c("Rasmussen","SurveyUSA","DiffCount","PropR","Republican")))
cor(Train[c("Rasmussen","SurveyUSA","DiffCount","PropR","Republican")])
model1 = glm(Republican ~ PropR, data = Train, family = binomial)
summary(model1)
pred1 = predict(model1, type = "response")
table(Train$Republican, pred1)
table(Train$Republican, pred1 >= 0.5)
library(ROCR)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
ROCRpred = prediction(pred1, Train$Republican)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
predTest1 = predict(model1, data = Test, type = "response")
table(Test$Republican, predictTest1)
table(Test$Republican, predictTest1>=0.5)
predTest1 = predict(model1, data = Test, type = "response")
table(Test$Republican, predtTest1>=0.5)
table(Test$Republican, predTest1 >= 0.5)
predTest1 = predict(model1, data = Test, type = "response")
table(Test$Republican, predTest1 >= 0.5)
cor(Train[c("Rasmussen","SurveyUSA","DiffCount","PropR","Republican")])
model1 = glm(Republican ~ PropR, data = Train, family = binomial)
predTrain1 = predict(model1, type = "response")
predTest1 = predict(model1, data = Test, type = "response")
table(Train$Republican, pred1 >= 0.5)
table(Test$Republican, predTest1 >= 0.5)
library(ROCR)
predTest1 = predict(model1, newdata = Test, type = "response")
table(Train$Republican, pred1 >= 0.5)
table(Test$Republican, predTest1 >= 0.5)
model2 = glm(Republican ~ ProP + DiffCount, data = Train, family = binomial)
model2 = glm(Republican ~ PropR + DiffCount, data = Train, family = binomial)
predTrain2 = predict(model2, type = "response")
summary(models)
summary(model2)
table(Train$Republican, predTrain2 >= 0.5)
predTest2 = predict(model2, type = "response")
table(Test$Republican, predictTest2 >= 0.5)
table(Test$Republican, predTest2 >= 0.5)
predTest2 = predict(model2, type = "response")
table(Test$Republican, predTest2 >= 0.5)
predTest2 = predict(model2, type = "response", newdata = Test)
table(Test$Republican, predTest2 >= 0.5)
library(ROCR)
ROCRpredTest = prediction(predTest1, Test$Republican)
auc = as.numberic(performance(ROCRpredTest, "auc")@y.values)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
