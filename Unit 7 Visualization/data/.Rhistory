corpusRemoved = tm_map(corpusRemoved, stemDocument)
dtmRemoved = DocumentTermMatrix(corpusRemoved)
sparseRemoved = removeSparseTerms(dtmRemoved, 0.997)
wordsRemoved = as.data.frame(as.matrix(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
sparseRemoved
wikiWords = cbind(wordsAdded, wordsRemoved)
wikiWords$Vandal = wiki$Vandal
library(caTools)
set.seed(123)
split = sample.split(wikiWords, 0.7)
split = sample.split(wikiWords$Vandal, 0.7)
train = subset(wikiWords, split == TRUE)
test = subset(wikiWords, split == FALSE)
table(test$Vandal)
618/(618+545)
library(rpart)
library(rpart.plot)
cart = rpart(Vandal ~ ., data = train, method = "class")
prp(cart)
cart.pred = predict(cart, newdata = test)
table(test$Vandal, cart.pred$test > 0.5)
table(test$Vandal, cart.pred > 0.5)
head(cart.pred)
table(test$Vandal, cart.pred[,2] > 0.5)
(618+7)/nrow(test)
table(test$Vandal, cart.pred[,2] >= 0.5)
table(test$Vandal, cart.pred[,1] >= 0.5)
cart.pred = predict(cart, newdata = test, type = "class")
table(test$Vandal, cart.pred)
table(train$Vandal, predict(cart,type="class"))
1443/nrow(train)
wikiWords2 = wikiWords
grepl("http",http1,fixed=TRUE)
grepl("http","http1",fixed=TRUE)
grepl("http","htt1",fixed=TRUE)
grepl("http","http1",fixed=FALSE)
?grepl
wikiWords2$HTTP = ifelse(grepl("http",wiki$Added,fixed=TRUE),1,0)
summary(wikiWords2)
str(wikiWords2)
table(wikiWords2$HTTP)
train2 = subset(wikiWords2, split == TRUE)
test2 = subset(wikiWords2, split == TRUE)
cart2 = rpart(Vandal ~ ., data = train, method = "class")
prp(cart2)
cart.pred2 = predict(cart2, newdata = test2, type = "class")
table(test2$Vandal, cart.pred2)
(1443 + 38)/nrow(test)
(1443 + 38)/nrow(test2)
wikiWords$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsRemoved = rowSums(as.matrix(dtmRemoved))
wikiWords2$NumWordsAdded
as.matrix(dtmAdded)
as.matrix(dtmAdded)[1:10,1:10]
mean(wikiWords2$NumWordsAdded)
cart3 = rpart(Vandal ~ ., data = train, method = "class")
prp(cart3)
cart2 = rpart(Vandal ~ ., data = train2, method = "class")
prp(cart2)
cart.pred2 = predict(cart2, newdata = test2, type = "class")
table(test2$Vandal, cart.pred2)
(1411 + 171)/nrow(test2)
train3 = subset(wikiWords2, split == TRUE)
test3 = subset(wikiWords2, split == FALSE)
cart3 = rpart(Vandal ~ ., data = train3, method = "class")
prp(cart3)
cart.pred3 = predict(cart3, newdata = test3, type = "class")
table(test3$Vandal, cart.pred3)
(517 + 260)/nrow(test3)
wikiWords3 = wikiWords2
wikiWords3$Minor = wiki$Minor
wikiWords3$Loggedin = wiki$Loggedin
train4 = subset(wikiWords3, split == TRUE)
test4 = subset(wikiWords3, split == FALSE)
cart4 = rpart(Vandal ~ ., data = train4, method = "class")
prp(cart4)
cart.pred4 = predict(cart4, newdata = test4, type = "class")
table(test4$Vandal, cart.pred4)
(572 + 285)/nrow(test4)
wiki = read.csv("Desktop/Analytics Edge/Unit 5 Text Analytics/data/wiki.csv",
stringsAsFactors = FALSE)
wiki$Vandal = as.factor(wiki$Vandal)
table(wiki$Vandal)
library(tm)
library(SnowballC)
corpusAdded = Corpus(VectorSource(wiki$Added))
corpusAdded = tm_map(corpusAdded, tolower)
corpusAdded = tm_map(corpusAdded, removePunctuation)
corpusAdded = tm_map(corpusAdded, removeWords, c(stopwords("english")))
corpusAdded = tm_map(corpusAdded, stemDocument)
dtmAdded = DocumentTermMatrix(corpusAdded)
sparseAdded = removeSparseTerms(dtmAdded, 0.997)
wordsAdded = as.data.frame(as.matrix(sparseAdded))
colnames(wordsAdded) = paste("A", colnames(wordsAdded))
# bags of word for remove
corpusRemoved = Corpus(VectorSource(wiki$Removed))
corpusRemoved = tm_map(corpusRemoved, tolower)
corpusRemoved = tm_map(corpusRemoved, removePunctuation)
corpusRemoved = tm_map(corpusRemoved, removeWords, c(stopwords("english")))
corpusRemoved = tm_map(corpusRemoved, stemDocument)
dtmRemoved = DocumentTermMatrix(corpusRemoved)
sparseRemoved = removeSparseTerms(dtmRemoved, 0.997)
wordsRemoved = as.data.frame(as.matrix(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
wikiWords = cbind(wordsAdded, wordsRemoved)
wikiWords$Vandal = wiki$Vandal
library(caTools)
set.seed(123)
split = sample.split(wikiWords$Vandal, 0.7)
train = subset(wikiWords, split == TRUE)
test = subset(wikiWords, split == FALSE)
table(test$Vandal)
library(rpart)
library(rpart.plot)
cart = rpart(Vandal ~ ., data = train, method = "class")
prp(cart)
cart.pred = predict(cart, newdata = test, type = "class")
table(test$Vandal, cart.pred)
(618+12)/nrow(test)
(618+12)/(533+618+12)
wikiWords2 = wikiWords
wikiWords2$HTTP = ifelse(grepl("http",wiki$Added,fixed=TRUE),1,0)
table(wikiWords2$HTTP)
train2 = subset(wikiWords2, split == TRUE)
test2 = subset(wikiWords2, split == TRUE)
cart2 = rpart(Vandal ~ ., data = train2, method = "class")
prp(cart2)
cart.pred2 = predict(cart2, newdata = test2, type = "class")
table(test2$Vandal, cart.pred2)
wikiWords2 = wikiWords
wikiWords2$HTTP = ifelse(grepl("http",wiki$Added,fixed=TRUE),1,0)
table(wikiWords2$HTTP)
train2 = subset(wikiWords2, split == TRUE)
test2 = subset(wikiWords2, split == FALSE)
cart2 = rpart(Vandal ~ ., data = train2, method = "class")
prp(cart2)
cart.pred2 = predict(cart2, newdata = test2, type = "class")
table(test2$Vandal, cart.pred2)
(609 + 57)/(609+9+488+57)
wikiWords2$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsRemoved = rowSums(as.matrix(dtmRemoved))
mean(wikiWords2$NumWordsAdded)
train3 = subset(wikiWords2, split == TRUE)
test3 = subset(wikiWords2, split == FALSE)
cart3 = rpart(Vandal ~ ., data = train3, method = "class")
prp(cart3)
cart.pred3 = predict(cart3, newdata = test3, type = "class")
table(test3$Vandal, cart.pred3)
(514 + 248)/(514 + 248 + 104+297)
wikiWords3 = wikiWords2
wikiWords3$Minor = wiki$Minor
wikiWords3$Loggedin = wiki$Loggedin
train4 = subset(wikiWords3, split == TRUE)
test4 = subset(wikiWords3, split == FALSE)
cart4 = rpart(Vandal ~ ., data = train4, method = "class")
prp(cart4)
cart.pred4 = predict(cart4, newdata = test4, type = "class")
table(test4$Vandal, cart.pred4)
library(caret)
library(e1071)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid(.cp = seq(0.01, 0.5, 0.01))
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,
tuneGrid = cp.grid)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid(.cp = seq(0, 1, 0.1))
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,
tuneGrid = cp.grid)
cp.grid = expand.grid(.cp = seq(0, 0.3, 0.1))
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,
tuneGrid = cp.grid)
seq(0, 0.3, 0.1)
cp.grid = expand.grid(.cp = seq(0, 0.1, 0.01))
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,
tuneGrid = cp.grid)
?train
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control)
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control)
str(train4)
tr.control
cp.grid = expand.grid(.cp = seq(0, 1, 0.01))
cp.grid = expand.grid(.cp = seq(0, 1, 0.01))
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,
tuneGrid = cp.grid)
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,tuneGrid = cp.grid)
str(train4)
library(randomForest)
randomForest = randomForest(Vandal ~ ., data = train4, nodsize = 20, ntree = 200)
colnames(train4)
colnames(wikiTrain3) = make.names(colnames(wikiTrain3), unique = TRUE)
colnames(train4) = make.names(colnames(train4), unique = TRUE)
colnames(train4)
randomForest = randomForest(Vandal ~ ., data = train4, nodsize = 20, ntree = 200)
colnames(test4) = make.names(colnames(test4), unique = TRUE)
randomForest.pred = predict(randomForest, newdata = test4, type = "class")
table(test4$Vandal, randomForest.pred)
(582+276)/(582+276+36+269)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid(.cp = seq(0, 1, 0.01))
CV = train(Vandal ~ ., data = train4, method = "rpart", trControl = tr.control,
tuneGrid = cp.grid)
best.cart = CV$finalModel
CV
best.cart = CV$finalModel
best.cart.pred = predict(best.cart, newdata = test4, type = "class")
table(test4$Vandal, best.cart.pred)
(536+311)/(536+311+82+234)
log = glm(Vandal ~ ., data = train, family = binomial)
summary(log)
log = glm(Vandal ~ ., data = train4, family = binomial)
log = glm(Vandal ~ ., data = train4, family = binomial)
log.pred = predict(log, newdata = test4, type = "response")
table(test4$Vandal, log.pred > 0.5)
(494 + 309)/(124 + 236)
(494 + 309)/(124 + 236 + 494 + 309)
library(caTools)
setwd("Desktop/kaggle /otto group /")
source("code/function.R")
data = read.csv("data/train.csv")
# randomForest
set.seed(10)
spl = sample.split(data$target, SplitRatio = 0.7)
train = subset(data, spl == TRUE)
test = subset(data, spl == FALSE)
library(randomForest)
myNtree = 100
RF = randomForest(target ~ .- id, data = train, ntree = myNtree)
RFPred = predict(RF, test, type = "prob")
submitssion = data.frame(id = test$id, target = test$target, RFPred)
logLoss(submitssion)
library(caret)
preproc = preProcess(train)
preproc = preProcess(train)
str(train)
limitedTrain = train[,c(-1,-95)]
str(limitedTrain)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, train)
str(normTrain)
normTrain = predict(preproc, limitedTrain)
limitedTest = test[,c(-1,-95)]
normTest = predict(preproc, limitedTest)
normTrain = cbind(train$id,normTrain,train$target)
str(normTrain)
normTest = cbind(test$id, normTest, test$target)
normRF = randomForest(target ~ . -id, data = normTrain, ntree = myNtree)
normTrain = predict(preproc, limitedTrain)
normTrain = data.frame(train$id,normTrain,train$target)
str(normTest)
str(normTrain)
names(normTrain)[c(1,95)] = c("id", "target")
normTrain = predict(preproc, limitedTrain)
normTrain = cbind(train$id,normTrain,train$target)
names(normTrain)[c(1,95)] = c("id", "target")
str(normTrain)
names(normTest)[c(1,95)] = c("id", "target")
normRF = randomForest(target ~ . -id, data = normTrain, ntree = myNtree)
normRFPred = predict(normRF, newdata = normTest, type = "prob")
submission = data.frame(id = test$id, target = test$target, normRFPred)
logLoss(submission)
logLoss(submitssion)
normRFPred = predict(normRF, newdata = test, type = "prob")
submission = data.frame(id = test$id, target = test$target, normRFPred)
logLoss(submission)
mvt = read.csv("mvt.csv", stringsAsFactors = FALSE)
setwd("~")
setwd("~/Desktop/Analytics Edge/Unit 7 Visualization/data/")
mvt = read.csv("mvt.csv", stringsAsFactors = FALSE)
mvt$Date = strptime(mvt$Date, format = "%m/%d/%y %H:%M")
str(mvt)
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$Hour
str(mvt)
mvt$Hour = mvt$Date$hour
str(mvt)
WeekDay = as.data.frame(table(mvt$Weekday))
str(WeekDay)
names(WeekDay)[1] = "Day"
WeekDay$Day = factor(WeekDay$Day, order = TRUE ,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
"Saturday", "Sunday"))
str(WeekDay)
library(ggplot2)
ggplot2(data = WeekDay, aes(x = Day, y = Freq)) + geom_line()
library(ggplot2)
ggplot(data = WeekDay, aes(x = Day, y = Freq)) + geom_line()
ggplot(data = WeekDay, aes(x = Day, y = Freq)) + geom_line(group = 1)
ggplot(data = WeekDay, aes(x = Day, y = Freq)) + geom_line(aes(group = 1))
ggplot(data = WeekDay, aes(x = Day, y = Freq)) + geom_line(aes(group = 1)) +
ylab("Motor Crime")
ggplot(data = WeekDay, aes(x = Day, y = Freq)) + geom_line(aes(group = 1), linetype = 2) +
ylab("Motor Crime")
ggplot(data = WeekDay, aes(x = Day, y = Freq)) + geom_line(aes(group = 1), alpha = 0.3) +
ylab("Motor Crime")
str(WeekDay)
str(mtv)
str(mvt)
DayHours = as.data.frame(mvt$Hour, mvt$Weekday)
DayHours
str(DayHours)
DayHours = data.frame(mvt$Hour, mvt$Weekday)
str(DayHours)
DayHours = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHours)
names(DayHours)[1:2] = c("Day", "Hour")
str(DayHours)
DayHours$Hour = as.numeric(DayHours$Hour)
str(DayHours)
DayHours$Day = factor(DayHours$Day, order = TRUE, levels = c("Monday", "Tuesday",
"Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
str(DayHours)
ggplot(DayHours, aes(x = Hour, y = Freq)) + geom_line(aes(group = Day))
ggplot(DayHours, aes(x = Hour, y = Freq)) + geom_line(aes(group = Day, color = Day))
ggplot(DayHours, aes(x = Hour, y = Freq)) + geom_line(aes(group = Day, color = Day),size = 2)
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq))
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "white", high = "red")
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red")
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red") +
theme_bw()
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red") +
theme_bw(axis.title.y = element_blank())
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red") +
theme(axis.title.y = element_blank())
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red") +
theme(axis.title.y = element_blank()) + theme_bw()
DayHours$Hour = as.numeric(as.character(DayHours$Hour))
DayHours = as.data.frame(table(mvt$Weekday, mvt$Hour))
names(DayHours)[1:2] = c("Day", "Hour")
str(DayHours)
DayHours$Hour = as.numeric(as.character(DayHours$Hour))
DayHours$Day = factor(DayHours$Day, order = TRUE, levels = c("Monday", "Tuesday",
"Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(DayHours, aes(x = Hour, y = Freq)) + geom_line(aes(group = Day, color = Day),size = 2)
ggplot(DayHours, aes(x = Hour, y = Day)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red") +
theme(axis.title.y = element_blank()) + theme_bw()
ggplot(DayHours, aes(x = Day, y = Hour)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = "Total MV Thefts", low = "yellow", high = "red") +
theme(axis.title.y = element_blank()) + theme_bw()
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
chicago = get_map(location = "china", zoom = 8)
chicago
ggmap(chicago)
chicago = get_map(location = "hangzhou", zoom = 9)
ggmap(chicago)
chicago = get_map(location = "hangzhou", zoom = 11)
ggmap(chicago)
chicago = get_map(location = "chicago", zoom = 11)
ggmap(chicago)
str(mvt)
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
round(1,2)
round(c(1,23),2)
round(c(1,2,3),2)
?round
str(mvt)
table(mvt$Latitude, mvt$Longitude)
area = as.data.frame(table(mvt$Latitude, mvt$Longitude))
x = round(mvt$Latitude, 2)
str(x)
area = as.data.frame(table(round(mvt$Latitude, 2), round(mvt$Longitude,2 )))
y = round(mvt$Longitude,2 )
str(y)
mvt$Latitude[1:100]
area = as.data.frame(table(round(mvt$Latitude, 1), round(mvt$Longitude,1)))
str(area)
ggmap(chicago) + ggplot(area, aes(x = Var1, y = Var2)) + geom_point(aes(color = Freq))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
ggmap(chicago) + ggplot(area, aes(x = Var1, y = Var2)) + geom_point(aes(color = Freq))
str(area)
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq))
area = as.data.frame(table(round(mvt$Latitude, 2), round(mvt$Longitude,2)))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq))
area = as.data.frame(table(round(mvt$Latitude, 1), round(mvt$Longitude,1)))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
str(area)
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq))
area
ggmap(chicago) + geom_point(data = area, aes(x = Var2, y = Var1, color = Freq))
area = as.data.frame(table(round(mvt$Longitude, 1), round(mvt$Latitude,1)))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq))
ggmap(chicago) + geom_point(data = area, aes(x = Var2, y = Var1, color = Freq))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq))
str(area)
area = as.data.frame(table(round(mvt$Longitude, 2), round(mvt$Latitude,2)))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq))
area = as.data.frame(table(round(mvt$Longitude, 1), round(mvt$Latitude,1)))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq, size = Freq))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq, size = Freq)) +
scale_color_gradient(names = "Motor Crime", low = "yellow", high = "red")
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq, size = Freq)) +
scale_color_gradient(name = "Motor Crime", low = "yellow", high = "red")
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq, size = Freq)) +
scale_color_gradient(name = "Motor Crime", low = "yellow", high = "red") +
scale_size(name = "Motor Crime")
area = as.data.frame(table(round(mvt$Longitude, 2), round(mvt$Latitude,2)))
area$Var1 = as.numeric(as.character(area$Var1))
area$Var2 = as.numeric(as.character(area$Var2))
ggmap(chicago) + geom_point(data = area, aes(x = Var1, y = Var2, color = Freq, size = Freq)) +
scale_color_gradient(name = "Motor Crime", low = "yellow", high = "red") +
scale_size(name = "Motor Crime")
ggmap(chicago) + geom_tile(data = area, aes(x=Var1, y=Var2, alpha = Freq), fill = "red")
area2 = subset(area, Freq != 0)
str(area2)
ggmap(chicago) + geom_tile(data = area2, aes(x=Var1, y=Var2, alpha=Freq), fill = "red")
str(area)
1638-686
getwd()
murder = read.csv("murders.csv")
statesMap = map_data("state")
?map_data
str(murder)
str(statesMap)
library(ggplot2)
ggplot(statesMap, aes(x = long, y = lat)) + geom_polygon(aes(fill = "white", color = "black"))
ggplot(statesMap, aes(x = long, y = lat)) +
geom_polygon(aes(fill = "white", color = "black", group = group))
ggplot(statesMap, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = "white", color = "black"))
ggplot(statesMap, aes(x = long, y = lat, group = group)) +
geom_polygon()
ggplot(statesMap, aes(x = long, y = lat, group = group, fill = "white")) +
geom_polygon()
ggplot(statesMap, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white")
ggplot(statesMap, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(statesMap, aes(x = long, y = lat)) +
geom_polygon(fill = "white", color = "black")
ggplot(statesMap, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
str(murder)
murder$State = tolower(murder$State)
?merge
murderMap = merge(murder, statesMap, by = c(murder$State, statesMap$region))
murderMap = merge(murder, statesMap, by = c("State", "region"))
murderMap = merge(murder, statesMap, by = intersect("State", "region"))
str(murderMap)
murder$region = tolower(murder$State)
murderMap = merge(murder, statesMap, region)
murderMap = merge(murder, statesMap, by = region)
murderMap = merge(murder, statesMap, by = "region")
str(murderMap)
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) +
geom_polygon(color = "black")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) +
geom_polygon(color = "black") + scale_fill_gradient(low = "balck", high = "red")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) +
geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) +
geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red")
murderMap$MuderRate = murderMap$Murders/murderMap$Population
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red")
murderMap$MurderRate = murderMap$Murders/murderMap$Population
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red")
murderMap$MurderRate = murderMap$Murders/murderMap$Population * 1000
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black",lim = c(0,1)) + scale_fill_gradient(low = "black", high = "red")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,1))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,2))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,10))
summary(murderMap$MurderRate)
murderMap$MurderRate = murderMap$Murders/murderMap$Population * 10000
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,10))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,1))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,1))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,1))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", limits = c(0,1))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend")
